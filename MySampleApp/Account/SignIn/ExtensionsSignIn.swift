//
//  ExtensionsSignIn.swift
//  Swap
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.6
//
//

import Foundation
import AWSCognitoIdentityProvider
import AWSMobileHubHelper
import AWSDynamoDB
import OneSignal
/// Extension for the View Controller containing the UI to sign in the user. These functions aid in the signing in process.
@available(iOS 9.0, *)
extension SignInViewController {
    
    /// Call this function whenever the sign in button is pressed to log in the user
    /// - Attention: This function does not itself sign in the user but rather calls other functions that sign in the user
    
    func signIn() {
        // set the interactive auth delegate to self, since this view controller handles the login process for user pools
        AWSCognitoUserPoolsSignInProvider.sharedInstance().setInteractiveAuthDelegate(self)
        self.handleLoginWithSignInProvider(AWSCognitoUserPoolsSignInProvider.sharedInstance())
    }
    
    /// Edit this function in order to customize what happens after the user signs in successfully (i.e. Display Profile View Controller
    func handleLoginWithSignInProvider(_ signInProvider: AWSSignInProvider) {
        
        AWSIdentityManager.defaultIdentityManager().loginWithSign(signInProvider, completionHandler: {(result, error)  in
            // If no error reported by SignInProvider, discard the sign-in view controller.
            
            if error == nil {
                DispatchQueue.main.async(execute: {
                    
                    // Do whatever needs to be done after a succesful login (i.e. go to profile view controller)
                    Analytics.didSignIn()
                    SwapUser(username: getUsernameOfSignedInUser()).setUpPushNotifications()
                    self.performSegue(withIdentifier: "signIn", sender: nil)
                    
                    
                    
                })
            }
            
            
            print("RESULT = \(result), error = \(error)")
            
        })
    }
    
    
    
    
}

// Extension to adopt the `AWSCognitoIdentityInteractiveAuthenticationDelegate` protocol
@available(iOS 9.0, *)
extension SignInViewController: AWSCognitoIdentityInteractiveAuthenticationDelegate {
    
    // this function handles the UI setup for initial login screen, in our case, since we are already on the login screen, we just return the View Controller instance
    func startPasswordAuthentication() -> AWSCognitoIdentityPasswordAuthentication {
        return self
    }
    
    
}

// Extension to adopt the `AWSCognitoIdentityPasswordAuthentication` protocol
@available(iOS 9.0, *)
extension SignInViewController: AWSCognitoIdentityPasswordAuthentication {
    /**
     Obtain username and password from end user.
     @param authenticationInput input details including last known username
     @param passwordAuthenticationCompletionSource set passwordAuthenticationCompletionSource.result
     with the username and password received from the end user.
     */
    public func getDetails(_ authenticationInput: AWSCognitoIdentityPasswordAuthenticationInput, passwordAuthenticationCompletionSource: AWSTaskCompletionSource<AWSCognitoIdentityPasswordAuthenticationDetails>) {
        
        self.passwordAuthenticationCompletion = (passwordAuthenticationCompletionSource as AnyObject) as? AWSTaskCompletionSource<AnyObject>
        
    }
    
    
    /// Customize this function in order to display UI or do whatever that needs to be done if the login fails for the user (i.e. Display UI screen that says invalid login)
    func didCompleteStepWithError(_ error: Error?) {
        if error != nil {
            
            //*** There was an error signing in
            
            DispatchQueue.main.async(execute: {
                
              
                self.signInFailed()
                
                UIAlertView(title: "Could Not Sign In",
                            message: "Invalid username and password",
                            delegate: nil,
                            cancelButtonTitle: "Ok").show()
            })
        }
    }
}

// Extension to adopt the `AWSCognitoUserPoolsSignInHandler` protocol
@available(iOS 9.0, *)
extension SignInViewController: AWSCognitoUserPoolsSignInHandler {
    
    /// Edit this function in order to customize what happens if the user does 'NOT' enter a username and password at sign in.
    func handleUserPoolSignInFlowStart() {
        // check if both username and password fields are provided
        guard let username = self.usernameField.text?.lowercased().toUsernameSignInAlias(), !username.isEmpty,
            let password = self.passwordField.text, !password.isEmpty else {
                DispatchQueue.main.async(execute: {
                    
                    self.signInFailed()
                    
                    UIAlertView(title: "Invalid Login",
                                message: "Please enter a valid username and password.",
                                delegate: nil,
                                cancelButtonTitle: "Ok").show()
                })
                return
        }
        // set the task completion result as an object of AWSCognitoIdentityPasswordAuthenticationDetails with username and password that the app user provides
        self.passwordAuthenticationCompletion?.setResult(AWSCognitoIdentityPasswordAuthenticationDetails(username: username, password: password))
    }
    
    func signInFailed(){
        
        blackOverlay?.isHidden = true
        loadingSymbol?.isHidden = true
        SignUpButton.isEnabled = true
        SignInButton.isEnabled = true
        usernameField.isEnabled = true
        passwordField.isEnabled = true
        
    }
}









//********************************************************************************************************************************************
//============================================================================================================================================
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++









/// Extension for the View Controller containing the UI to sign in the user. These functions aid in the signing in process.
@available(iOS 9.0, *)
extension ConfirmAccountViewController {
    
    /// Call this function whenever the sign in button is pressed to log in the user
    /// - Attention: This function does not itself sign in the user but rather calls other functions that sign in the user
    
    func signIn() {
        // set the interactive auth delegate to self, since this view controller handles the login process for user pools
        AWSCognitoUserPoolsSignInProvider.sharedInstance().setInteractiveAuthDelegate(self)
        self.handleLoginWithSignInProvider(AWSCognitoUserPoolsSignInProvider.sharedInstance())
    }
    
    /// Edit this function in order to customize what happens after the user signs in successfully (i.e. Display Profile View Controller
    func handleLoginWithSignInProvider(_ signInProvider: AWSSignInProvider) {
        
        AWSIdentityManager.defaultIdentityManager().loginWithSign(signInProvider, completionHandler: {(result, error)  in
            // If no error reported by SignInProvider, discard the sign-in view controller.
            
            if error == nil {
                DispatchQueue.main.async(execute: {
                    
                    // Do whatever needs to be done after a succesful login (i.e. go to profile view controller)
                    let me = SwapUser(username: getUsernameOfSignedInUser())
                    print("the get saved first name is .. \(getSavedFirstname())")
                    me.set(Firstname: getSavedFirstname() ?? "John",  Lastname: getSavedLastname() ?? "Doe", Phonenumber: getPhoneNumber() ?? "+15555555555", Email: getSavedEmail() ?? "change@me.com",  Birthday: getBirthday(), Date_Created: Date().timeIntervalSince1970 as Double, isVerified: false, isPrivate: false, Points: 0, Swapped: 0, Swaps: 0, ProfileImage: defaultImage, QRImage: "https://unitag-qr-code-generation.p.mashape.com/api?setting=%7B%22LAYOUT%22%3A%7B%22COLORBG%22%3A%22ffffff%22%2C%22COLOR1%22%3A%221fbcd3%22%7D%2C%22EYES%22%3A%7B%22EYE_TYPE%22%3A%22Grid%22%7D%2C%22BODY_TYPE%22%3A5%2C%22E%22%3A%22H%22%2C%22LOGO%22%3A%7B%22L_NAME%22%3A%22https%3A%2F%2Fstatic-unitag.com%2Ffile%2Ffreeqr%2Fcfc031a5ddb114b66233e4e1762b93cb.png%22%2C%22EXCAVATE%22%3Atrue%2C%22L_X_Norm%22%3A0.4%2C%22L_Y_Norm%22%3A0.396%2C%22L_WIDTH%22%3A0.2%2C%22L_LENGTH%22%3A0.208%7D%7D&data=%7B%22TYPE%22%3A%22text%22%2C%22DATA%22%3A%7B%22TEXT%22%3A%22http://swapapp.co/\(getUsernameOfSignedInUser())%22%2C%22URL%22%3A%22%22%7D%7D", WillShareSpotify: false, WillShareYouTube: false, WillSharePhonenumber: false, WillShareVine: false, WillShareInstagram: false, WillShareTwitter: false, WillShareEmail: false, WillShareReddit: false, WillSharePinterest: false, WillShareSoundCloud: false, WillShareGitHub: false, WillShareVimeo: false, DidSetInformation: {
                        
                       me.setUpPushNotifications()
                        
                        DispatchQueue.main.async {
                            
                             self.performSegue(withIdentifier: "toConnectSocialMedias", sender: nil)
                        }
                        
                        return nil
                    })
                    
                    
                    
                   
                    
                    
                    
                })
            }
            
            
            print("RESULT = \(result), error = \(error)")
            
        })
    }
    
    
    
    
}

// Extension to adopt the `AWSCognitoIdentityInteractiveAuthenticationDelegate` protocol
@available(iOS 9.0, *)
extension ConfirmAccountViewController: AWSCognitoIdentityInteractiveAuthenticationDelegate {
    
    // this function handles the UI setup for initial login screen, in our case, since we are already on the login screen, we just return the View Controller instance
    func startPasswordAuthentication() -> AWSCognitoIdentityPasswordAuthentication {
        return self
    }
    
    
}

// Extension to adopt the `AWSCognitoIdentityPasswordAuthentication` protocol
@available(iOS 9.0, *)
extension ConfirmAccountViewController: AWSCognitoIdentityPasswordAuthentication {
    /**
     Obtain username and password from end user.
     @param authenticationInput input details including last known username
     @param passwordAuthenticationCompletionSource set passwordAuthenticationCompletionSource.result
     with the username and password received from the end user.
     */
    public func getDetails(_ authenticationInput: AWSCognitoIdentityPasswordAuthenticationInput, passwordAuthenticationCompletionSource: AWSTaskCompletionSource<AWSCognitoIdentityPasswordAuthenticationDetails>) {
        
        self.passwordAuthenticationCompletion = (passwordAuthenticationCompletionSource as AnyObject) as? AWSTaskCompletionSource<AnyObject>
        
    }
    
    
    /// Customize this function in order to display UI or do whatever that needs to be done if the login fails for the user (i.e. Display UI screen that says invalid login)
    func didCompleteStepWithError(_ error: Error?) {
        if error != nil {
            
            //*** There was an error signing in
            
            DispatchQueue.main.async(execute: {
                
                
                UIAlertView(title: "Could Not Sign In",
                            message: "Invalid username and password",
                            delegate: nil,
                            cancelButtonTitle: "Ok").show()
            })
        }
    }
}

// Extension to adopt the `AWSCognitoUserPoolsSignInHandler` protocol
@available(iOS 9.0, *)
extension ConfirmAccountViewController: AWSCognitoUserPoolsSignInHandler {
    
    /// Edit this function in order to customize what happens if the user does 'NOT' enter a username and password at sign in.
    func handleUserPoolSignInFlowStart() {
   
      
        // set the task completion result as an object of AWSCognitoIdentityPasswordAuthenticationDetails with username and password that the app user provides
        self.passwordAuthenticationCompletion?.setResult(AWSCognitoIdentityPasswordAuthenticationDetails(username: getUsernameOfSignedInUser(), password: getPassword() ?? ""))
    }
}








