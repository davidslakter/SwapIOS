//
//  AppDelegate.swift
//  Swap
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.8
//
import UIKit
import IQKeyboardManagerSwift
import Swifter
import AWSCognitoIdentityProvider
import OneSignal
import Branch
import Fabric
import Answers
import TwitterKit
import Crashlytics
//import FacebookCore
import SafariServices
import Firebase
@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate, UITabBarControllerDelegate, UIScrollViewDelegate {
    
    var window: UIWindow?
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
        
        //make UI changes
        UIApplication.shared.statusBarStyle = .lightContent
        
        var storyboard: UIStoryboard = grabStoryboard()
        
        Fabric.with([Crashlytics.self(), Answers.self()])
        Fabric.sharedSDK().debug = true
       
        Twitter.sharedInstance().start(withConsumerKey: TWITTER_CONSUMER_KEY, consumerSecret: TWITTER_CONSUMER_SECRET)
        
        // Override point for customization after application launch.
        AWSMobileClient.sharedInstance.didFinishLaunching(application, withOptions: launchOptions)

        
        
        //enable keyboard manager
        IQKeyboardManager.sharedManager().enable = true
        
        configureRemoteNotificationsSettings(with: launchOptions)
        configureUniversalLinksAndSwapLinks(with: launchOptions, and: storyboard)
        
        
        determineWhatScreenToShow(on: storyboard)
        
         FirebaseApp.configure()
        return true
        
        
    }
    
    
    
    
    func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -> Bool {
       
        return AWSMobileClient.sharedInstance.withApplication(application, withURL: url, withSourceApplication: sourceApplication, withAnnotation: annotation as AnyObject)
    }
    
    
    
    
    func applicationWillResignActive(_ application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
    }
    
    
    
    func applicationDidEnterBackground(_ application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
        
    }
    
    
    func applicationDidBecomeActive(_ application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
        AWSMobileClient.sharedInstance.applicationDidBecomeActive(application)
    }
    
    
    
    func applicationWillTerminate(_ application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    }
    
    
    
    func applicationWillEnterForeground(_ application: UIApplication) {
        // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
        
        
    }
    
    
    
    
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        AWSMobileClient.sharedInstance.application(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken)
    }
    
    
    
    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
        AWSMobileClient.sharedInstance.application(application, didFailToRegisterForRemoteNotificationsWithError: error as NSError)
    }
    
    
    
    
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any]) {
        
        
        AWSMobileClient.sharedInstance.application(application, didReceiveRemoteNotification: userInfo)
        
        
    }
    
    
    
    func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {
        
        if Twitter.sharedInstance().application(app, open:url, options: options) {
            return true
            
        }
        
        Swifter.handleOpenURL(url)
        youtube_oauth2.handleRedirectURL(url)
        return true
    }
    
    
    
    
    
    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([Any]?) -> Void) -> Bool {
        
        Branch.getInstance().continue(userActivity)
        
        
        
        return true
    }
    
   
    func configureRemoteNotificationsSettings(with launchOptions: [UIApplicationLaunchOptionsKey: Any]?)  {
        
       
        
        OneSignal.initWithLaunchOptions(launchOptions, appId: ONE_SIGNAL_APP_ID,
                                        handleNotificationAction: {
                                            (result) in
                                            
                                            
                                            
                                            // Completion Block Called when the user presses an action button from a Swap Request
                                            let payload = result?.notification.payload
                                            // Obtain the Action Selected From Notification
                                            
                                            if let additionalData = payload?.additionalData, let actionSelected = additionalData["actionSelected"] as? String {
                                                
                                                let username = additionalData["username"] as? String ?? ""
                                                
                                                switch actionSelected{
                                                case "Accept":
                                                    // User Accepted
                                                    SwapUser(username: getUsernameOfSignedInUser()).performActionOnSwapRequestFromUser(withUsername: username, doAccept: true)
                                                    break
                                                    
                                                case "Decline":
                                                    SwapUser(username: getUsernameOfSignedInUser()).performActionOnSwapRequestFromUser(withUsername: username, doAccept: false)
                                                    break
                                                    
                                                default: break
                                                }
                                                
                                            }
                                            
                                            
        }, settings: [kOSSettingsKeyInFocusDisplayOption:OSNotificationDisplayType.notification.rawValue])
        
     
        OneSignal.inFocusDisplayType = OSNotificationDisplayType.notification
    }
    
    

    
    func configureUniversalLinksAndSwapLinks(with launchOptions: [UIApplicationLaunchOptionsKey: Any]?, and storyboard: UIStoryboard)  {
        
        let branch = Branch.getInstance()
        branch?.initSession(launchOptions: launchOptions, andRegisterDeepLinkHandler: { (param, error) in
            
            if error == nil{
                
                
                
                // opened by swap link
                if let swapLink = param?["+non_branch_link"] as? String{
                    
                    if isSignedIn(){
                        
                        if swapLink.contains("/VP"){ // VP verification links should be in the form http://getswap.me/VP/###### where ###### is the VP code
                            
                            let code = getUsernameFromSwapLink(swapLink: swapLink)
                            
                            SwapUser().getInformation(completion: { (error, user) in
                                DispatchQueue.main.async {
                                    
                                    
                                    if user != nil {
                                        // Valid Swap Link or VP Code
                                        
                                        if let VPcode = user?._VPCode{
                                            
                                            if VPcode == code{
                                                // Verify account
                                                SwapUser().set(isVerified: true)
                                            }
                                        }
                                        
                                        
                                    }
                                    
                                }
                            })
                            
                            
                        }
                            
                        else {
                            
                            let username = getUsernameFromSwapLink(swapLink: swapLink)
                            
                            guard username != "getswap.me" && username != "swapapp.co" else {
                                
                                self.determineWhatScreenToShow(on: storyboard)
                                
                                return 
                            }
                            searchedUser = username // Pass the username to the searched user view controller
                            
                            let TabBarVC = storyboard.instantiateViewController(withIdentifier: "SearchUsersTabBarController")
                            
                            var SearchedProfileVC = storyboard.instantiateViewController(withIdentifier: "SearchedUserProfileViewController")
                            
                            TabBarVC.present(SearchedProfileVC, animated: false)
                            
                            
                            
                            
                            self.window = UIWindow(frame: UIScreen.main.bounds)
                            
                            self.window!.rootViewController = TabBarVC
                            
                            self.window!.backgroundColor = UIColor.white
                            
                            self.window!.makeKeyAndVisible()
                            
                            
                        }
                        
                    }
                    
                }
            }
        })
        

    }
    
    
    
    
    func determineWhatScreenToShow(on storyboard: UIStoryboard)  {
        
        self.window = UIWindow(frame: UIScreen.main.bounds)
        
        // Reference to Profile View Controller
        let profileViewControllerID: String = "ProfileViewController"
        let profileVC = storyboard.instantiateViewController(withIdentifier: profileViewControllerID)
        
        
        let signInVCID: String = "SignInViewController"
        let signInVC = storyboard.instantiateViewController(withIdentifier: signInVCID)
        
        // if signed in  -> profile view controller else -> login view controller
        let defaultVC: UIViewController = isSignedIn() ? profileVC : signInVC
        
        
        
        
        
        // If there is no saved view controller ID in UserDefaults, it instantiates the default view controller as the initial view controller. However, if there is, it instantiates the last view controller it can remember being on
        self.window?.rootViewController =  (getLastViewControllerID() != nil ) ? storyboard.instantiateViewController(withIdentifier: getLastViewControllerID()! ) : defaultVC
        self.window?.makeKeyAndVisible()
    }
    
    
}

func grabStoryboard() -> UIStoryboard {
    // determine screen size
    let screenHeight = UIScreen.main.bounds.size.height
    var storyboard: UIStoryboard! = nil
    
    switch (screenHeight) {
    // iPhone 4s
    case 480:
        storyboard = UIStoryboard(name: "IPad", bundle: nil)
        break
    // iPhone 5s
    case 568:
        storyboard = UIStoryboard(name: "IPhoneSE", bundle: nil)
    // iPhone 6
        
    case 667:
        storyboard = UIStoryboard(name: "Main", bundle: nil)
        
    // iPhone 6 Plus
    case 736:
        storyboard = UIStoryboard(name: "IPhone7Plus", bundle: nil)
        
    default:
        storyboard = UIStoryboard(name: "IPad", bundle: nil)
        // it's an iPad
        break
    }
    
    return storyboard
}






